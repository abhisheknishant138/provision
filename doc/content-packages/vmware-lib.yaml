meta:
  Author: RackN
  CodeSource: https://github.com/digitalrebar/provision-content/vmware-lib
  Color: blue
  Copyright: Digital Rebar
  Description: VMware Library of Tools and Enhancements
  DisplayName: VMware Library
  DocUrl: https://provision.readthedocs.io/en/latest/doc/content-packages/vmware-lib.html
  Documentation: |-
    VMware Library
    --------------

    The Vmware Library provides additional content that enables capabilities for
    interacting with VMware ESXi, vSphere, and VCF (VMware Cloud Foundation)
    environments.


    GoVC General Information
    ========================

    GoVC is a Golang binary that implements the VMOMI library of capabilities.  The
    primary benefit is it's a single statically compiled binary (stand alone) that has
    no external dependencies.  It implements API interaction with vSphere and services
    (eg ESXi and vCenter).

    The GoVC binary (``govc``) is compiled from the GoVMOMI project, which can be
    found at:

      * https://github.com/vmware/govmomi

    The GoVC tool is capable of an extremely broad and complete set of control plane
    interactions with vSphere (ESXi and vCenter) services.  Please review the
    ``examples`` directory in the above referenced Repo for more details.

    For usage examples of the ``govc`` binary in use inside the Digital Rebar *govc*
    context container, please see:

      * https://github.com/vmware/govmomi/blob/master/govc/USAGE.md


    GoVC Context
    ++++++++++++

    The GoVC context implements a RackN Context Container with the Agent (runner, drpcli
    binary) and the ``govc`` compiled binary inside of it.  By use of setting Param values,
    ``govc`` commands can be executed against vSphere resources.


    GoVC and VCSA Deployment
    ++++++++++++++++++++++++

    VCSA (vCenter Server Appliance) can be deployed via the GoVC tool.  The operator must
    perform the following preparotry tasks to enable the Context environment to operate
    the ``govc`` binary in the RackN Context Container.  This setup must be performed on
    the DRP Endpoint.  In the future, the *bootstrap* workflows will be available to help
    set up these environments.

    First, either clone the githup repo, or save the scripts in the ``tools`` directory to
    your DRP Endpoint, and run them as specified below.

    To check out the github repo with just the ``vmware-lib`` content pack and tooling in it,
    do:

      ::

        # checkout github vmware-lib content pack and associated tools
        git init
        git remote add origin https://github.com/digitalrebar/provision-content.git
        git fetch origin
        git checkout origin/v4 -- vmware-lib


    **Setup Instructions**

    There is a "helper" script that attempts to do all of the below steps, called
    ``tools/do-all.sh``.  Individual steps below:

      - Install the ``docker-context, ``vmware``, ``vmware-lib``, and ``task-library`` catalog items

        *  ``drpcli catalog item install vmware``
        *  ``drpcli catalog item install vmware-lib``
        *  ``drpcli catalog item install task-library``
        * ``drpcli catalog item install docker-context``

      - Create the docker container for the Runner and GoVC tools

        * run the ``tools/build-docker.sh`` script to build the containers
        * ***OR*** install from pre-build Docker Hub images
        * run the ``tools/dockerhub-containers.sh`` script

      - Upload the containers and enable them in drpcli

        * See the ``tools/drpcli-commands.sh`` script to do this

      - Create the Context Runner machines to start Workflow from

        * See the ``tools/drpcli-create-machines.sh`` script to do this

      - The VCSA OVA must be staged on an HTTP server for the tooling to download

        * Obtain the VMware provide VCSA ISO image and extract the OVA from the ISO
        * example download location - https://my.vmware.com/web/vmware/details?productId=742&rPId=39682&downloadGroup=VC67U3B
        * can be extracted with ``bsdtar`` like: ``bsdtar -xvf VMware-VCSA-all-6.7.0-15132721.iso vcsa/*.ova``
        * upload with drpcli like: ``export N=$(ls -1 vcsa/*.ova); drpcli files upload $N as images/vcsa/$N``
        * reference this location on the DRP endpoint as: ``{{.ProvisionerURL}}/files/images/vcsa/{...name...}``

      - Prepare the Template JSON file that GoVC will use to deploy the OVA (***see below***)
      - Set the Param values on your Runner fake machine (either directly. or as a Profile)
      - Run the Workflow ``govc-vcenter-create``

    Scripts referenced in this document should be available from:

      * https://github.com/digitalrebar/provision-content/tree/v4/vmware-lib

    vCenter Complete Note
    +++++++++++++++++++++

    If install vCenter 7.x - the ``govc`` connect URL method seems to have changed.
    AS of 2020/07/01 - the Stage ``govc-wait-for-vcenter`` will not complete successfully.
    You will have to monitor the VAMI web interface (on port 5480 by default), to determine
    when it has successfully finished.

    The workflow will error out after 60 minutes in this case.  Either force remove the
    Workflow from the Context Machine, or ignore the status stage error.


    Prepare the VCSA JSON Deployment Template
    +++++++++++++++++++++++++++++++++++++++++

    The Param ``govc/template-json`` defines the name of a Template that you must provide with
    the configuration details for the deployed VCSA instance.  This template can be a standard
    Digital Rebar template, provided via another Content Pack, or you can upload a one-off template
    for the job.  See the ``templates/govc-*EXAMPLE*.json`` examples in the ``vmware-lib`` content
    pack for an example template.

    Once you have prepared the Template JSON file and uploaded it, you must set the Param
    to point to it.  This param will be set on the fake Runner Machine that the Workflow is
    run on.

    In addition to the Template JSON Param, you must provie a vSphere resource (eg ESXi) node
    to execute the deployment to.  Set these Params as defined in the below section.


    Define the Deployment Target
    ++++++++++++++++++++++++++++

    You must define the vSphere deployment target (eg ESXi node) to deploy the VCSA OVA to.
    This is done by specifying the URL directly as a single Param, or the individual Param
    values for the Username, Password, Node, and optionally Port.  See the Param documentation
    for these values.

    These values can all be combined in to a single Profile along with the Template JSON
    Param defined above for easier add/remove on the Machine object.

    Example Profile for vCenter deployment:

      ::

        ---
        Name: "vcsa-govc-esxi-ewr1"
        Description: "EXAMPLE PROFILE - CHANGE VALUES !!!!"
        Documentation: |
          Change these values to match the JSON template details, the
          uploaded OVA, and related network information for your vCenter
          deployment.

          govc/* params are for the target Node (vSphere ESXi) to deploy the
          vCenter VCSA OVA on.  The JSON Template defines the vCenter
          installation details.

        Meta:
          color: "blue"
          icon: "hdd"
          title: "Digital Rebar"
        Params:
          govc/datastore: "datastore1"
          govc/datastore-skip-create: false
          govc/insecure: true
          govc/node: "10.75.75.250"
          govc/ova-location: "{{.ProvisionerURL}}/files/images/vcsa/VMware-vCenter-Server-Appliance-7.0.0.10300-16189094_OVF10.ova"
          govc/template-json: "esxi-ewr1-vc01.json.tmpl"
          govc/username: "root"
          govc/password: "VMware123"
        Profiles: []

    Save the above to file, and use drpcli to add to your Endpoint (eg ``drpcli profiles create vcenter.yaml``,
    then add the Profile to the Context Machine that will deploy the vCenter VCSA OVA.
  Icon: cloud
  License: APLv2
  Name: vmware-lib
  Order: ""
  Prerequisites: ""
  RequiredFeatures: ""
  Source: https://github.com/digitalrebar/provision-content/vmware-lib
  Tags: vmware,enterprise,contexts
  Type: dynamic
  Version: v20.07.02-074808
sections:
  contexts:
    govc:
      Available: false
      Bundle: ""
      Description: govc context using container image digitalrebar-govc
      Documentation: |
        Executes the command referenced in the ``govc/command`` Param, in the
        container context ``digitalrebar/govc``.

        You can pull the container image from docker hub for both Docker and
        Podman environments, eg:

          * ``docker pull digitalrebar/govc``
      Endpoint: ""
      Engine: docker-context
      Errors: []
      Image: digitalrebar/govc
      Meta:
        color: blue
        icon: terminal
        title: RackN Content
      Name: govc
      ReadOnly: false
      Validated: false
    vcsa-deploy:
      Available: false
      Bundle: ""
      Description: vcsa-deploy context using image digitalrebar-vcsa-deploy
      Documentation: |
        Context that executes the command specified in ``vcsa-deploy/command`` Param,
        in container context ``digitalrebar/vcsa-deploy``.

        You can pull the container image from docker hub for both Docker and
        Podman environments, eg:

          * ``docker pull digitalrebar/vcsa-deploy``
      Endpoint: ""
      Engine: docker-context
      Errors: []
      Image: digitalrebar/vcsa-deploy
      Meta:
        color: orange
        icon: terminal
        title: RackN Content
      Name: vcsa-deploy
      ReadOnly: false
      Validated: false
  params:
    govc/command:
      Available: false
      Bundle: ""
      Description: Command to for 'govc' to run.
      Documentation: |
        ``govc`` command to run - simply pass the value of this Param to the ``govc``
        command in the container context.

        Defaults to ``govc about`` command.

        As an example, you can print the ``govc`` environment which affects the
        runtime operation of the ``govc`` command, using ``govc env``.  To use
        this command, set the Param to the value ``env`` (do not specify ``govc``
        ifself).
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/command
      ReadOnly: false
      Schema:
        default: about
        type: string
      Secure: false
      Validated: false
    govc/datastore:
      Available: false
      Bundle: ""
      Description: Set the datastore for subsequent govc commands.
      Documentation: |
        Datastore that subsequent ``govc`` commands will use, if required.

        For example set this to something like ``datastore1``.

        Defaults to an empty (unused) value.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: hdd
        title: RackN Content
      Name: govc/datastore
      ReadOnly: false
      Schema:
        default: ""
        type: string
      Secure: false
      Validated: false
    govc/datastore-create-disk:
      Available: false
      Bundle: ""
      Description: The disk to create a Datastore on, or 'first_available'
      Documentation: |
        This param sets the disk to create the datastore defined in the param
        ``govc/datastore-datastore-name``.  The param can be set to a rule that
        will search for a disk, or directly to a specific disk.

        Supported *rules* and direct disk definition settings:

          * ``first_available``
          * ``disk=t10.ATA_____Micron_M500DC_MTFDDAK120MBB_____________________14260DAD9402``

        Defaults to ``first_available``.

        The ``first_available`` rule attempts to filter out used disk devices, then
        chooses the first of any remaining disks that are unused.

        .. note:: IF using the *govc* command, you can find the disk information with the command
                  ``govc host.esxcli storage core path list`` (after setting up the appropriate
                  ``GOVC_*`` environment variables, of course.).
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: hdd
        title: RackN Content
      Name: govc/datastore-create-disk
      ReadOnly: false
      Schema:
        default: first_available
        type: string
      Secure: false
      Validated: false
    govc/datastore-create-name:
      Available: false
      Bundle: ""
      Description: Defines the name of the Datastore to be created.
      Documentation: |
        The name of the datastore to be created.

        Defaults to ``datastore1`` if not otherwise defined.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: hdd
        title: RackN Content
      Name: govc/datastore-create-name
      ReadOnly: false
      Schema:
        default: datastore1
        type: string
      Secure: false
      Validated: false
    govc/datastore-skip-create:
      Available: false
      Bundle: ""
      Description: If set to 'true', skips creating a new datastore.
      Documentation: |
        Boolean ``true``/``false`` value - determines if the datastore Stage creation
        in a workflow should skip creating a datastore.

        Defaults to ``true`` - skipping creating a datastore.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: hdd
        title: RackN Content
      Name: govc/datastore-skip-create
      ReadOnly: false
      Schema:
        default: true
        type: boolean
      Secure: false
      Validated: false
    govc/insecure:
      Available: false
      Bundle: ""
      Description: Allow accepting self signed certificates on VMware ESXi URL
      Documentation: |
        If set to ``true``, then accept self signed certificates of the
        VMware ESXi or vCenter resource.

        By default this value is set to ``true``.
      Endpoint: ""
      Errors: []
      Meta:
        color: yellow
        icon: terminal
        title: RackN Content
      Name: govc/insecure
      ReadOnly: false
      Schema:
        default: true
        type: boolean
      Secure: false
      Validated: false
    govc/network:
      Available: false
      Bundle: ""
      Description: Defines the vSphere network name to use for deploying OVAs
      Documentation: |
        Network of the ESXi/vCenter instance to use when deploying OVAs via the ``govc`` command.

        For example, set to something like ``VM Network``.

        Defaults to an empty (unused) value.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/network
      ReadOnly: false
      Schema:
        default: ""
        type: string
      Secure: false
      Validated: false
    govc/node:
      Available: false
      Bundle: ""
      Description: Host or IP Address of the VMware ESXI or vCenter resource to connect
        to
      Documentation: |
        The hostname or IP address of the VMware ESXi or vCenter URL to connect to, to execute a
        ``govc/command`` against.

        Has an empty value by default.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: terminal
        title: RackN Content
      Name: govc/node
      ReadOnly: false
      Schema:
        default: ""
        type: string
      Secure: false
      Validated: false
    govc/ova-location:
      Available: false
      Bundle: ""
      Description: Deployment Resource OVA URL location to deploy from via govc/command
      Documentation: |
        The URL location of the OVA Resource to deploy via the ``govc/command``.

        The OVA will be downloaded inside the Context container and used by the ``govc``
        command to deploy the resource.  This could be a *VMware vCenter Server Appliance*
        (VCSA), NSX-T OVA, or any other deployable OVA format appliance device.

        This Parameter can utilize Digital Rebar Golang Templating constructs, which will
        be expanded appropriately when called.  For example:

          * ``{{ .ProvisionerURL }}/files/images/vcsa/foo.vcsa``
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/ova-location
      ReadOnly: false
      Schema:
        default: ""
        type: string
      Secure: false
      Validated: false
    govc/password:
      Available: false
      Bundle: ""
      Description: VMware ESXi password to authenticate against the VMware ESXi or
        vCenter instance.
      Documentation: |
        Password (secure) of the ``govc/username`` to authenticate against on the VMware
        ESXi or vCenter URL.

        Defaults to RackN ``root`` default password for ESXi.
      Endpoint: ""
      Errors: []
      Meta:
        color: red
        icon: terminal
        password: hideme
        title: RackN Content
      Name: govc/password
      ReadOnly: false
      Schema:
        default: RocketSkates
        type: string
      Secure: true
      Validated: false
    govc/port:
      Available: false
      Bundle: ""
      Description: Set the Port number of the VMware ESXi or vCenter resource
      Documentation: |
        Sets the Port number of the VMware ESXi or vCenter resource, if it has
        been relocated from the default (443).
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        icon: terminal
        title: RackN Content
      Name: govc/port
      ReadOnly: false
      Schema:
        default: 0
        type: integer
      Secure: false
      Validated: false
    govc/resource-pool:
      Available: false
      Bundle: ""
      Description: Resource Pool to use for the govc deployed OVA
      Documentation: |
        Resource Pool to use for the govc deployed OVA.

        For example, set to something like ``*/Resources``.

        Defaults to empty (unused) value.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/resource-pool
      ReadOnly: false
      Schema:
        default: ""
        type: string
      Secure: false
      Validated: false
    govc/template-json:
      Available: false
      Bundle: ""
      Description: Render a template inside the govc context container.
      Documentation: |
        Render the template named in this Param, to the govc context container.  Several
        of the govc commands require a config file passed in to the command.  For example,
        the OVA deploy option requires a JSON template to configure the deployed OVA.

        This template will be rendered to ``/tmp/template.json`` inside the container
        for use by the ``govc/command``.  For example, to deploy an OVA, save your OVA
        JSON template to the DRP system, assign the template name to this Param, and
        then set the ``govc/template`` accordingly.

        Example:
          ::

            set Param ``govc/template-json`` to: ``vcsa-esxi-uefi.json``
            which will be rendered to:  ``/tmp/template.json``
            govc/command reference:  ``govc import.ova -options=/tmp/template.json OVA_LOCATION``
            OVA_LOCATION: would be the resource URL for the ``user:password@address`` of ESXi or vCenter

        Unfortunately, it appears the GoVC command is not able to utilize a remote HTTP path
        as the JSON template input.  This is true at least up until version 0.22.0 of GoVC.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/template-json
      ReadOnly: false
      Schema:
        type: string
      Secure: false
      Validated: false
    govc/url:
      Available: false
      Bundle: ""
      Description: Full ESXi or vCenter URL resource to connect to.
      Documentation: |
        The full VMware ESXi or vCenter URL resource to connect to, to execute a
        ``govc/command`` against.

        Example:  ``root:RocketSkates@192.168.1.10``

        You must include the ``user:pass`` credentials if you sue this format.

        There are two paths to configure the Resource URL, either this
        Param, or leave this Param empty, and specify all three required Param
        values, and the one optional:

        All three required if ``govc/url`` is not used:
        ::

          govc/username:  user
          govc/password:  s3cr3t
          govc/node: 192.168.1.10

        Optional (defaults to '443'):
        ::

          govc/port: 1443

        By default this Param has an empty value.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/url
      ReadOnly: false
      Schema:
        default: ""
        type: string
      Secure: false
      Validated: false
    govc/username:
      Available: false
      Bundle: ""
      Description: VMware ESXi or vCenter username used to authenticate for govc/command
      Documentation: |
        Username of the VMware ESXi or vCenter account to authenticate for the
        ``govc/command``.

        Defaults to RackN default ESXi username of ``root``.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: govc/username
      ReadOnly: false
      Schema:
        default: root
        type: string
      Secure: false
      Validated: false
    vcsa-deploy/command:
      Available: false
      Bundle: ""
      Description: Command to for 'vcsa-deploy' to run.
      Documentation: |
        ``vcsa-deploy`` command to run

        Defaults to ``vcsa-deploy --help`` command.

        Example of a valid command:

          ::

            install /tmp/template.json --accept-eula --acknowledge-ceip --verbose --log-dir /tmp/vcsa-deploy-logs --no-esx-ssl-verify

        ``/tmp/template.json`` would be the template instantiated JSON config file that
        describes the deployment options.
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: vcsa-deploy/command
      ReadOnly: false
      Schema:
        default: --help
        type: string
      Secure: false
      Validated: false
    vcsa-deploy/template-json:
      Available: false
      Bundle: ""
      Description: Render a template inside the vcsa-deploy context container.
      Documentation: |
        Render the template named in this Param, to the vcsa-deploy context container.

        This template will be rendered to ``/tmp/template.json`` inside the container
        for use by the ``vcsa-deploy/command``.  For example, to deploy an OVA, save your OVA
        JSON template to the DRP system, assign the template name to this Param, and
        then set the ``vcsa-deploy/template-json`` Param accordingly.

        Example:
          ::

            set Param ``vcsa-deploy/template-json`` to: ``vcsa-esxi-uefi.json``
            # which will be rendered to:  ``/tmp/template.json``
            set Param ``vcsa-deploy/command``:  ``vcsa-deploy install /tmp/template.json <OPTIONS>``
      Endpoint: ""
      Errors: []
      Meta:
        color: green
        icon: terminal
        title: RackN Content
      Name: vcsa-deploy/template-json
      ReadOnly: false
      Schema:
        type: string
      Secure: false
      Validated: false
  profiles:
    govc-about-test:
      Available: false
      Bundle: ""
      Description: govc command test profile
      Documentation: |
        Runs the simple ``govc about`` command on a test ESXi instance.
      Endpoint: ""
      Errors: []
      Meta:
        color: grey
        icon: terminal
        title: GOVC Test Profile
      Name: govc-about-test
      Params:
        govc/command: about
        govc/insecure: true
        govc/url: root:RocketSkates@192.168.124.4
      Partial: false
      Profiles: []
      ReadOnly: false
      Validated: false
    govc-vcsa-test:
      Available: false
      Bundle: ""
      Description: govc VCSA deployment test profile
      Documentation: |
        Runs ``govc`` to deploy a test VCSA deployment.  Requires that the VCSA configuration
        JSON file be saved to to the context container as ``/tmp/template.json`` prior to the
        command being run.
      Endpoint: ""
      Errors: []
      Meta:
        color: grey
        icon: terminal
        title: GOVC VCSA Test Profile
      Name: govc-vcsa-test
      Params:
        govc/command: import.ova -options=/tmp/template.json http://192.168.124.1:8091/files/images/vcsa.ova
        govc/datastore: datastore1
        govc/insecure: true
        govc/network: VM Network
        govc/resource-pool: '*/Resources'
        govc/template-json: vcsa-esxi-uefi.json.tmpl
        govc/url: root:RocketSkates@192.168.124.4
      Partial: false
      Profiles: []
      ReadOnly: false
      Validated: false
    govc-vcsa-vc01:
      Available: false
      Bundle: ""
      Description: govc VCSA deployment test profile for ewr1 test environment
      Documentation: |
        Runs ``govc`` to deploy a test VCSA deployment.  Requires that the VCSA configuration
        JSON file be saved to the context container as ``/tmp/template.json`` prior to the
        command being run.

        The ``govc-command`` task reads the ``govc/template-json`` Param
        and writes the referenced template to the temporary json location.
      Endpoint: ""
      Errors: []
      Meta:
        color: grey
        icon: terminal
        title: GOVC VCSA Test Profile
      Name: govc-vcsa-vc01
      Params:
        govc/command: import.ova -options=/tmp/template.json http://147.75.65.75:8091/files/images/vcsa.ova
        govc/datastore: datastore1
        govc/insecure: true
        govc/network: VM Network
        govc/resource-pool: '*/Resources'
        govc/template-json: govc-vcsa-vc01.json.tmpl
        govc/url: root:RocketSkates1!@139.178.66.98
      Partial: false
      Profiles: []
      ReadOnly: false
      Validated: false
    vcsa-deploy-pungent:
      Available: false
      Bundle: ""
      Description: vcsa-deploy VCSA test profile
      Documentation: |
        Runs ``vcsa-deploy`` to deploy a test VCSA deployment.  Requires that the VCSA
        configuration JSON file be saved to the context container as ``/tmp/template.json``
        prior to the command being run.

        The ``vcsa-deploy-command`` task reads the ``vcsa-deploy/template-json`` Param
        and writes the referenced template to the temporary json location.
      Endpoint: ""
      Errors: []
      Meta:
        color: orange
        icon: terminal
        title: vcsa-deploy VCSA Test Profile
      Name: vcsa-deploy-pungent
      Params:
        vcsa-deploy/command: install --accept-eula --acknowledge-ceip --verbose --no-esx-ssl-verify
          /tmp/template.json
        vcsa-deploy/template-json: vcsa-deploy-pungent.json.tmpl
      Partial: false
      Profiles: []
      ReadOnly: false
      Validated: false
  stages:
    govc-command:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: Run govc command in GoVMOMI enabled context container.
      Documentation: |
        This Stage runs a *govc* command specified by the ``govc/command``
        Parameter in the *govc* context container.  If not command is
        specified, the default action is to simply run ``govc about`` against
        the remote specified ESXi or vCenter API service.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: terminal
        title: RackN Content
      Name: govc-command
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:govc
      - govc-command
      Templates: []
      Validated: false
    govc-datastore-create:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: Run govc command to create a datastore on the remote vSphere ESXi
        node
      Documentation: |
        This Stage runs a *govc* command to create a datastore on the ESXi instance.
        The Param ``govc/datastore-device`` will be used as the backing volume for
        the datastore defined by name in ``govc/datastore-name``.

        If not specified, the defaults for device are "first found device", and the name
        of the datastore will be set to "datastore1".
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: terminal
        title: RackN Content
      Name: govc-datastore-create
      OptionalParams:
      - govc/datastore-create-disk
      - govc/datastore-create-name
      - govc/datastore-skip-create
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:govc
      - govc-datastore-create
      Templates: []
      Validated: false
    govc-ova-stage:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: Stage the OVA referenced in 'govc/ova-location' in the container.
      Documentation: |
        This stage makes the OVA referenced in ``govc/ova-location`` availabe in the
        container for the *govc* command's use.  It will be saved as ``/ova/import.ova``
        inside the container, which will be appended to the ``govc`` command if the
        argument *import.ova* is found in the command line call.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: terminal
        title: RackN Content
      Name: govc-ova-stage
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:govc
      - govc-ova-stage
      Templates: []
      Validated: false
    govc-vc-test:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: govc test stage
      Documentation: ""
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: terminal
        title: RackN Content
      Name: govc-vc-test
      OptionalParams: []
      Params:
        govc/command: import.ova -options=/ova/template.json
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:govc
      - govc-datastore-create
      - govc-ova-stage
      - govc-command
      - govc-wait-for-vcenter
      Templates: []
      Validated: false
    govc-vcenter-create:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: Run govc command in GoVMOMI enabled context container.
      Documentation: |
        This Stage runs a *govc* command specified by the ``govc/command``
        Parameter in the *govc* context container.  If not command is
        specified, the default action is to simply run ``govc about`` against
        the remote specified ESXi or vCenter API service.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: terminal
        title: RackN Content
      Name: govc-vcenter-create
      OptionalParams: []
      Params:
        govc/command: import.ova -options=/ova/template.json
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:govc
      - govc-command
      Templates: []
      Validated: false
    govc-wait-for-vcenter:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: Wait for API access to the newly deployed vCenter instance.
      Documentation: |
        This Stage blocks and waits until the vCenter service API is fully
        avaialble after deployment.  The stage uses the *govc about* which
        requires API access to get the *about* details from the remote
        API service.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        icon: terminal
        title: RackN Content
      Name: govc-wait-for-vcenter
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:govc
      - govc-wait-for-vcenter
      Templates: []
      Validated: false
    vcsa-deploy-command:
      Available: false
      BootEnv: ""
      Bundle: ""
      Description: Run vcsa-deploy command in govmomi context container
      Documentation: ""
      Endpoint: ""
      Errors: []
      Meta:
        color: orange
        icon: terminal
        title: RackN Content
      Name: vcsa-deploy-command
      OptionalParams: []
      Params: {}
      Partial: false
      Profiles: []
      ReadOnly: false
      Reboot: false
      RequiredParams: []
      RunnerWait: false
      Tasks:
      - context:vcsa-deploy
      - vcsa-deploy-command
      Templates: []
      Validated: false
  tasks:
    context-clear:
      Available: false
      Bundle: ""
      Description: Clear Context from Machine
      Documentation: |
        Clears the Context on the Machine.  Needed to return to the main
        Workflow when we jump Contexts.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        feature-flags: sane-exit-codes
        icon: eraser
        title: RackN
      Name: context-clear
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/bin/bash
          # Clears the Context on the Machine by setting BaseContext to ""
          # RackN Copyright 2019

          set -e
          {{template "setup.tmpl" .}}

          # prepare machine for agent to take over
          drpcli machines meta set $RS_UUID key BaseContext to ""

          exit 0
        ID: ""
        Link: ""
        Meta: null
        Name: context-clear
        Path: ""
      Validated: false
    context-runner:
      Available: false
      Bundle: ""
      Description: Return to using Runner Context
      Documentation: |
        Sets the Machine BaseContext to "runner", which returns it back to the fake
        machine runner when a Workflow is not being executed on a real Machine.
      Endpoint: ""
      Errors: []
      Meta:
        color: black
        feature-flags: sane-exit-codes
        icon: share
        title: RackN
      Name: context-runner
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams: []
      Templates:
      - Contents: |-
          #!/bin/bash
          # Set the Machine BaseContext to "runner"
          # RackN Copyright 2019

          set -e
          {{template "setup.tmpl" .}}

          # prepare machine for agent to take over
          drpcli machines meta set $RS_UUID key BaseContext to runner

          exit 0
        ID: ""
        Link: ""
        Meta: null
        Name: context-runner
        Path: ""
      Validated: false
    govc-command:
      Available: false
      Bundle: ""
      Description: A task to run govc commands against remote vSphere vCenter or ESXi
        instances
      Documentation: |
        This task executes a given ``govc`` call in a container context.  The govc
        command is defined via the Param ``govc/command``, which is required for this
        task.

        The operator must also specify the remote vSphere ESXi or vCenter resource to
        connect to, to execute ``govc`` commands against.  This is accomplished either
        by setting the ``govc/url`` Param, or the individual ``govc/username``,
        ``govc/password``, ``govc/node``, and optionally ``govc/port`` (if using a
        non-standrd Port.  See the documentation for each of those Params for more
        details.

        Many of the GoVC commands require a JSON configuration that defines more the
        values for customizing.  In these cases, use the ``govc/template-json`` param
        to define the Template to render inside of the GoVC container context.

        If an OVA file is found inside the container at ``/ova/import.ova``, and if the
        base argument of *import.ova* is found in the *govc* command, then the path
        and OVA name will be appended to the command sequence.

        Documentation and usage examples for ``govc`` can be found on the GoVMOMI
        website at:

          * https://github.com/vmware/govmomi/blob/master/govc/USAGE.md
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        feature-flags: sane-exit-codes
        icon: terminal
        title: Digital Rebar Community Content
      Name: govc-command
      OptionalParams:
      - govc/url
      - govc/insecure
      - govc/username
      - govc/password
      - govc/node
      - govc/port
      - govc/template-json
      Prerequisites: []
      ReadOnly: false
      RequiredParams:
      - govc/command
      Templates:
      - Contents: |
          #!/usr/bin/env bash
          # Execute a GoVC command against a remote vSphere ESXi or vCenter resource.
          # RackN Copyright 2020

          set -e

          {{ template "setup.tmpl" .}}

          {{ if .ParamExists "govc/template-json" }}
          {{ $dot := . -}}
          {{ $govctmpl := .Param "govc/template-json" -}}
          mkdir -p /ova
          rm -f /ova/template.json
          cat <<EOTMPL > /ova/template.json
          {{ $dot.CallTemplate $govctmpl $dot }}
          EOTMPL

          echo "===== BEGIN TEMPLATE DEBUG ===="
          echo ""
          echo "Using JSON Template for OVA: {{ $govctmpl }}"
          echo ""
          cat /ova/template.json
          echo ""
          echo "===== END TEMPLATE DEBUG ===="
          {{ end -}}

          {{ template "govc-setup.sh.tmpl" . }}

          CMD='{{ .Param "govc/command" }}'

          if echo $CMD | grep -q "import.ova"
          then
            if [[ -r "/ova/import.ova" ]]
            then
              CMD="$CMD /ova/import.ova"
            else
              xiterr 1 "'import.ova' command was specified, but no /ova/import.ova image found in the container"
            fi
          fi

          echo ""
          echo "==== RUN 'govc $CMD' ===="
          echo ""

          govc $CMD

          echo ""
          echo "==== DONE ===="
          echo ""

          exit 0
        ID: ""
        Link: ""
        Meta: null
        Name: govc-command.sh
        Path: ""
      Validated: false
    govc-datastore-create:
      Available: false
      Bundle: ""
      Description: A task to create a datastore on a remote ESXi instance.
      Documentation: |
        Creates a datastore on a remote ESXi instance.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        feature-flags: sane-exit-codes
        icon: terminal
        title: Digital Rebar Community Content
      Name: govc-datastore-create
      OptionalParams:
      - govc/url
      - govc/insecure
      - govc/username
      - govc/password
      - govc/node
      - govc/port
      Prerequisites: []
      ReadOnly: false
      RequiredParams:
      - govc/datastore-create-disk
      - govc/datastore-create-name
      Templates:
      - Contents: |
          #!/usr/bin/env bash
          # Execute a GoVC command against a remote vSphere ESXi or vCenter resource.
          # RackN Copyright 2020

          set -e

          {{ if eq (.Param "govc/datastore-skip-create" ) true }}
          echo "Skipping datastore creation as 'govc/datastore-skip-create' is 'true'."
          exit 0
          {{ end }}

          {{ template "setup.tmpl" .}}

          {{ template "govc-setup.sh.tmpl" . }}

          # yes jq parsing might be better w/ '--json' output, but no - it isn't
          HOST=$(govc host.info | grep "^Name:" | awk ' { print $NF } ')

          get_first_available() {
            RESULTS=$(govc host.esxcli --json storage vmfs extent list | jq -r '.Values | .[].DeviceName | .[]')
            if [[ -n "$RESULTS" ]]
            then
              for FILTER in $RESULTS
              do
                FILT="$FILT select(.Device | .[] != \"$FILTER\") |"
              done
            else
              FILT=""
            fi

            AVAIL=$(govc host.esxcli --json storage core path list | jq -r ".Values | .[] | $FILT .Device | .[] ")

            if [[ -n "$AVAIL" ]]
            then
              DISK=$(echo "$AVAIL" | head -1)
            else
              xiterr 1 "No available disks to create datastore on."
            fi
          }

          SELECT='{{ .Param "govc/datastore-create-disk" }}'
          DS_NAME='{{ .Param "govc/datastore-create-name" }}'
          if echo "$SELECT" | egrep -q "^disk="
          then
            DISK="$(echo $SELECT | sed 's/^disk=//g')"
            if govc host.esxcli --json storage core path list | jq -r ".Values | .[] | select(.Device .[] = \"$DISK\" | .[] "
            then
              echo "Found device '$DEVICE' to create datastore on."
            else
              echo "FATAL Unable to find requested device '$DEVICE'"
              echo "Device dump for debugging purposes..."
              govc host.esxcli storage core path list
              exit 1
            fi

          else
            case $SELECT in
              first_available) get_first_available ;;
              *)
                xiterr 1 "Unsupported Disk Selection request '$SELECT'. Supported is 'first_available' or 'disk=<DISK>'."
              ;;
            esac
          fi


          echo ""
          echo "==== RUN 'govc $CMD' ===="
          echo ""

          set -x
          govc datastore.create -type vmfs -name "$DS_NAME" -disk=$DISK $HOST
          set +x

          echo ""
          echo "==== DONE ===="
          echo ""

          exit 0
        ID: ""
        Link: ""
        Meta: null
        Name: govc-create-datastore.sh
        Path: ""
      Validated: false
    govc-ova-stage:
      Available: false
      Bundle: ""
      Description: A task to stage the OVA inside the container Context
      Documentation: |
        This tasks stages the specified OVA in ``govc/ova-location`` Param inside
        the container Context.  Unfortunately, the *govc* command does not appear
        to have support to specify remote resources as an HTTP/S URL reference.

        The OVA specified in the Param will be downloaded inside the container as
        a file named *import.ova*, which if that file exists, the ``govc-command``
        Task will append to the end of the executed *govc* arguments.
      Endpoint: ""
      Errors: []
      Meta:
        color: blue
        feature-flags: sane-exit-codes
        icon: terminal
        title: Digital Rebar Community Content
      Name: govc-ova-stage
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams:
      - govc/ova-location
      Templates:
      - Contents: |
          #!/usr/bin/env bash
          # Stage the OVA resource inside the container as 'import.ova'
          # RackN Copyright 2020

          set -e

          {{ template "setup.tmpl" .}}

          {{ if .ParamExists "govc/ova-location" }}
          which curl > /dev/null 2>&1 && { CMD="curl"; OPTS="-o"; }
          which wget > /dev/null 2>&1 && { CMD="wget"; OPTS="-O"; }
          mkdir -p /ova
          $CMD $OPTS /ova/import.ova '{{ .ParamExpand "govc/ova-location" }}'
          {{ else -}}
          xiterr 1 "'govc/ova-location' is required and was not specified"
          {{ end -}}

          echo "The OVA has been saved as '/ova/import.ova':"
          ls -lh /ova/import.ova

          exit 0
        ID: ""
        Link: ""
        Meta: null
        Name: govc-stage-ova.sh
        Path: ""
      Validated: false
    govc-wait-for-vcenter:
      Available: false
      Bundle: ""
      Description: A task wait for vCenter API availability
      Documentation: |
        Simple task to wait until the remote vSphere deployed resource responds correctly
        to a ``govc about`` request call.
      Endpoint: ""
      Errors: []
      Meta:
        color: purple
        feature-flags: sane-exit-codes
        icon: terminal
        title: Digital Rebar Community Content
      Name: govc-wait-for-vcenter
      OptionalParams: null
      Prerequisites: []
      ReadOnly: false
      RequiredParams:
      - govc/template-json
      Templates:
      - Contents: |
          #!/bin/bash
          # Wait for vCenter API to become available.
          # RackN Copyright 2020

          {{ template "setup.tmpl" .}}

          # disable shell history expansion as many vmware passwords have exclamation point in them
          set +H
          set -e
          set -o noglob

          # The template MUST be rendered to this filepath location inside the
          # container for use by govc.  This is handled in the govc-command task.
          TMPL=/ova/template.json
          JQ=$(which jq)
          [[ -z "$JQ" ]] && JQ=$(which drpjq)    || true
          [[ -z "$JQ" ]] && JQ=$(which drpclijq) || true
          [[ -z "$JQ" ]] && JQ=$(which gojq)     || true
          if [[ -z "$JQ" ]]; then
            D="$(which drpcli)"
            if [[ -n "$D" ]]; then
              ln -s $D /usr/local/bin/drpjq
              JQ="/usr/local/bin/drpjq"
            else
              xiterr 1 "Unable to find 'jq' or alternative to use."
            fi
          fi

          [[ ! -r "$TMPL" ]] && xiterr 1 "Unable to read JSON template '$TMPL', make sure previous tasks render this for us."

          U="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.vmdir.username") | .Value')"
          P="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.vmdir.password") | .Value')"
          A="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.appliance.net.addr") | .Value')"
          VCENTER_URL="https://${U}:${P}@${A}/sdk"

          # set up timer/loops in seconds - yes it can take a REALLY long time for VCSA to
          # fully come up on the network - benchmarked 45 minutes in some cases
          COUNTER=0
          TIMER=30
          LOOPS=120
          (( WAIT = LOOPS * TIMER ))

          echo ""
          echo "===== BEGIN wait loop for API service to become available ===="
          echo ""
          echo ">>> NOTICE:  This can take up to 60 minutes in some extreme cases. <<< "
          echo ""

          run_govc() {
            local _cmd="govc about -persist-session=false -k=true -u=$VCENTER_URL > /tmp/about.txt 2>&1"
            if eval $_cmd
            then
              return 0
            else
              echo ""
              echo "!!! failed command:  '$_cmd'"
              echo ""
              return 1
            fi
          }

          while (( COUNTER <= WAIT ))
          do
            if run_govc
            then
              echo "'govc about' returned results, API appears to be up, with returned info of:"
              echo ""
              cat /tmp/about.txt
              COMPLETE="true"
              break
            else
              echo "Waiting for API to become available ... '$LOOPS' Loops left at '$TIMER' seconds per loop."
              sleep $TIMER
              (( COUNTER += TIMER ))
              (( LOOPS-- ))
            fi
          done

          if [[ "$COMPLETE" == "true" ]]
          then
            echo ""
            echo "===== COMPLETED wait loop for API service to become available ===="
            echo ""
            exit 0
          else
            echo ""
            echo ">>> FATAL:  It appears the timer expired before the resource instance became available."
            echo ">>>         Either the process took too long, or it failed to deploy correctly.  Setting"
            echo ">>>         'rs-debug-enable=true' on the Machine and re-running may show useful debug info."
            echo ">>>         Wait timer was set for a total of '$WAIT' seconds."
            echo ""
            echo ">>>         The last output from govc command was:"
            echo ""
            cat /tmp/about.txt
            echo ""
            exit 1
          fi
        ID: ""
        Link: ""
        Meta: null
        Name: govc-wait-for-vcenter.sh
        Path: ""
      Validated: false
    vcsa-deploy-command:
      Available: false
      Bundle: ""
      Description: A task run to run vcsa-deploy context actions.
      Documentation: ""
      Endpoint: ""
      Errors: []
      Meta:
        color: orange
        feature-flags: sane-exit-codes
        icon: terminal
        title: Digital Rebar Community Content
      Name: vcsa-deploy-command
      OptionalParams: []
      Prerequisites: []
      ReadOnly: false
      RequiredParams:
      - vcsa-deploy/command
      - vcsa-deploy/template-json
      Templates:
      - Contents: |
          #!/bin/bash
          # RackN Copyright 2020
          # Run vcsa-deploy command

          set -e

          {{ template "setup.tmpl" .}}

          {{ if .ParamExists "vcsa-deploy/template-json" }}
          {{ $dot := . -}}
          {{ $template := .Param "vcsa-deploy/template-json" -}}
          mkdir -p /ova
          rm -f /ova/template.json
          cat <<EOTMPL > /ova/template.json
          {{ $dot.CallTemplate $template $dot }}
          EOTMPL

          echo "===== BEGIN TEMPLATE DEBUG ===="
          echo ""
          echo "Using JSON Template for OVA: {{ $template }}"
          echo ""
          cat /ova/template.json
          echo ""
          echo "===== END TEMPLATE DEBUG ===="
          {{ end -}}

          echo ""
          echo "==== SETUP vcsa-deploy Command ===="
          echo ""

          CMD="{{ .ParamExpand "vcsa-deploy/command" }}"
          export PATH=/root/deploy:$PATH

          echo ""
          echo "==== RUN 'vcsa-deploy $CMD' ===="
          echo ""

          vcsa-deploy $CMD

          echo ""
          echo "==== DONE ===="
          echo ""

          exit 0
        ID: ""
        Link: ""
        Meta: null
        Name: vcsa-deploy-command.sh
        Path: ""
      Validated: false
  templates:
    govc-setup.sh.tmpl:
      Available: false
      Bundle: ""
      Contents: |
        #!/usr/bin/env bash
        # setup the enviornment to execute a 'govc' command

        echo ""
        echo "==== SETUP govc Command ===="
        echo ""

        {{ $url := "" }} {{ $p := "" }}

        {{ if ( .Param "govc/url" ) }}
          {{ $url = .ParamExpand "govc/url" }}
          # govc/url is set, use it
          echo "Using 'govc/url' to set URL resource setting ... "
        {{ else }}
          # govc/url not set, construct the URL
          echo "Using govc/* individual Params to set URL resource setting ... "
          {{ $u := .Param "govc/username" }}
          {{ $s := .Param "govc/password" }}
          {{ $n := .ParamExpand "govc/node" }}
          {{ if ( .Param "govc/port" ) }}{{ $p := .Param "govc/port" | toString }}{{ $p = printf ":%s" $p }}{{ end }}
          {{ $url = printf "%s:%s@%s%s" $u $s $n $p }}
        {{ end -}}

        export GOVC_URL='{{ $url }}'
        {{ if eq (.Param "govc/insecure") true -}}export GOVC_INSECURE=1{{ end }}
        {{ if ( .Param "govc/datastore" )       }}export GOVC_DATASTORE='{{ .Param "govc/datastore" }}'{{ end }}
        {{ if ( .Param "govc/network" )         }}export GOVC_NETWORK='{{ .Param "govc/network" }}'{{ end }}
        {{ if ( .Param "govc/resource-pool" )   }}export GOVC_RESOURCE_POOL='{{ .Param "govc/resource-pool" }}'{{ end }}

        echo "govc environment variables:"
        env | grep -v grep | grep "GOVC_"
      Description: ""
      Endpoint: ""
      Errors: []
      ID: govc-setup.sh.tmpl
      Meta: {}
      ReadOnly: false
      Validated: false
    govc-vcsa-EXAMPLE.json.tmpl:
      Available: false
      Bundle: ""
      Contents: |
        {
          "Name": "vc01",
          "Annotation": "RackN Deployed VMware vCenter Server Appliance (VCSA)",
          "Deployment": "small",
          "DiskProvisioning": "thin",
          "IPAllocationPolicy": "dhcpPolicy",
          "IPProtocol": "IPv4",
          "MarkAsTemplate": false,
          "PowerOn": true,
          "InjectOvfEnv": true,
          "WaitForIP": false,
          "NetworkMapping": [
            {
              "Name": "Guest Network",
              "Network": "VM Network"
            }
          ],
          "PropertyMapping": [
            {
              "Key": "guestinfo.cis.deployment.autoconfig",
              "Value": "True"
            },
            {
               "Key": "guestinfo.cis.deployment.node.type",
               "Value": "embedded"
            },
            {
               "Key": "guestinfo.cis.db.type",
               "Value": "embedded"
            },
            {
              "Key": "guestinfo.cis.appliance.net.addr.family",
              "Value": "ipv4"
            },
            {
              "Key": "guestinfo.cis.appliance.net.mode",
              "Value": "static"
            },
            {
              "Key": "guestinfo.cis.appliance.net.addr",
              "Value": "10.10.10.83"
            },
            {
              "Key": "guestinfo.cis.appliance.net.prefix",
              "Value": "24"
            },
            {
              "Key": "guestinfo.cis.appliance.net.gateway",
              "Value": "10.10.10.1"
            },
            {
              "Key": "guestinfo.cis.appliance.net.dns.servers",
              "Value": "1.1.1.1,1.0.0.1"
            },
            {
              "Key": "guestinfo.cis.appliance.ntp.servers",
              "Value": "time-a.nist.gov,time-b.nist.gov,time-c.nist.gov"
            },
            {
              "Key": "guestinfo.cis.appliance.net.pnid",
              "Value": "10.10.10.83"
            },
            {
              "Key": "guestinfo.cis.appliance.root.passwd",
              "Value": "VMware1!"
            },
            {
              "Key": "guestinfo.cis.appliance.ssh.enabled",
              "Value": "True"
            },
            {
              "Key": "guestinfo.cis.appliance.root.shell",
              "Value": "/bin/bash"
            },
            {
              "Key": "guestinfo.cis.vmdir.site-name",
              "Value": "vc01"
            },
            {
              "Key": "guestinfo.cis.vmdir.domain-name",
              "Value": "vsphere.local"
            },
            {
              "Key": "guestinfo.cis.vmdir.username",
              "Value": "root@vspere.local"
            },
            {
              "Key": "guestinfo.cis.vmdir.password",
              "Value": "VMware1!"
            },
            {
              "Key": "guestinfo.cis.vmdir.first-instance",
              "Value": "True"
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.addr",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.port",
              "Value": "443"
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.user",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.password",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.thumbprint",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.placement",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.ceip_enabled",
              "Value": "False"
            },
            {
              "Key": "vami.domain.VMware-vCenter-Server-Appliance",
              "Value": "vsphere.local"
            },
            {
              "Key": "vami.searchpath.VMware-vCenter-Server-Appliance",
              "Value": ""
            }
          ]
        }
      Description: ""
      Endpoint: ""
      Errors: []
      ID: govc-vcsa-EXAMPLE.json.tmpl
      Meta: {}
      ReadOnly: false
      Validated: false
    govc-vcsa-vc01.json.tmpl:
      Available: false
      Bundle: ""
      Contents: |
        {
          "Name": "vc01",
          "Annotation": "RackN Deployed VMware vCenter Server Appliance (VCSA)",
          "Deployment": "small",
          "DiskProvisioning": "thin",
          "IPAllocationPolicy": "dhcpPolicy",
          "IPProtocol": "IPv4",
          "MarkAsTemplate": false,
          "PowerOn": true,
          "InjectOvfEnv": true,
          "WaitForIP": false,
          "NetworkMapping": [
            {
              "Name": "Guest Network",
              "Network": "VM Network"
            }
          ],
          "PropertyMapping": [
            {
              "Key": "guestinfo.cis.deployment.autoconfig",
              "Value": "True"
            },
            {
               "Key": "guestinfo.cis.deployment.node.type",
               "Value": "embedded"
            },
            {
               "Key": "guestinfo.cis.db.type",
               "Value": "embedded"
            },
            {
              "Key": "guestinfo.cis.appliance.net.addr.family",
              "Value": "ipv4"
            },
            {
              "Key": "guestinfo.cis.appliance.net.mode",
              "Value": "static"
            },
            {
              "Key": "guestinfo.cis.appliance.net.addr",
              "Value": "139.178.66.99"
            },
            {
              "Key": "guestinfo.cis.appliance.net.prefix",
              "Value": "29"
            },
            {
              "Key": "guestinfo.cis.appliance.net.gateway",
              "Value": "139.178.66.97"
            },
            {
              "Key": "guestinfo.cis.appliance.net.dns.servers",
              "Value": "1.1.1.1,1.0.0.1"
            },
            {
              "Key": "guestinfo.cis.appliance.ntp.servers",
              "Value": "time-a.nist.gov,time-b.nist.gov,time-c.nist.gov"
            },
            {
              "Key": "guestinfo.cis.appliance.net.pnid",
              "Value": "139.178.66.99"
            },
            {
              "Key": "guestinfo.cis.appliance.root.passwd",
              "Value": "Rskate1!"
            },
            {
              "Key": "guestinfo.cis.appliance.ssh.enabled",
              "Value": "True"
            },
            {
              "Key": "guestinfo.cis.appliance.root.shell",
              "Value": "/bin/bash"
            },
            {
              "Key": "guestinfo.cis.vmdir.site-name",
              "Value": "ewr1"
            },
            {
              "Key": "guestinfo.cis.vmdir.domain-name",
              "Value": "bearmetal.dev"
            },
            {
              "Key": "guestinfo.cis.vmdir.username",
              "Value": "administrator@bearmetal.dev"
            },
            {
              "Key": "guestinfo.cis.vmdir.password",
              "Value": "Rskate1!"
            },
            {
              "Key": "guestinfo.cis.vmdir.first-instance",
              "Value": "True"
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.addr",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.port",
              "Value": "443"
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.user",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.password",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.management.thumbprint",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.vpxd.ha.placement",
              "Value": ""
            },
            {
              "Key": "guestinfo.cis.ceip_enabled",
              "Value": "False"
            },
            {
              "Key": "vami.domain.VMware-vCenter-Server-Appliance",
              "Value": "bearmetal.dev"
            },
            {
              "Key": "vami.searchpath.VMware-vCenter-Server-Appliance",
              "Value": ""
            }
          ]
        }
      Description: ""
      Endpoint: ""
      Errors: []
      ID: govc-vcsa-vc01.json.tmpl
      Meta: {}
      ReadOnly: false
      Validated: false
    vcsa-deploy-EXAMPLE.json.tmpl:
      Available: false
      Bundle: ""
      Contents: |+
        {
            "__version": "2.13.0",
            "new_vcsa": {
                "esxi": {
                    "hostname": "10.10.10.100",
                    "username": "root",
                    "password": "RocketSkates1!",
                    "deployment_network": "VM Network",
                    "datastore": "datastore1",
                    "ssl_certificate_verification": { "verification_mode": "NONE" }
                },
                "appliance": {
                    "name": "vc01",
                    "image": "https://10.10.10.10:8092/files/images/vcsa.ova",
                    "deployment_option": "tiny",
                    "thin_disk_mode": true,
                    "ovftool_path": "/usr/bin/ovftool"
                },
                "network": {
                    "system_name": "vc01.bearmetal.dev",
                    "ip_family": "ipv4",
                    "mode": "static",
                    "ip": "10.10.10.100",
                    "prefix": "24",
                    "dns_servers": [ "1.1.1.1", "1.0.0.1" ],
                    "gateway": "10.10.10.1"
                },
                "os": {
                    "password": "RocketSkates1!",
                    "ntp_servers": [ "time-a.nist.gov", "time-b.nist.gov", "time-c.nist.gov" ],
                    "ssh_enable": true
                },
                "sso": {
                    "first_instance": true,
                    "domain_name": "bearmetal.dev",
                    "password": "RocketSkates1!"
                }
            },
            "ceip": {
                "settings": {
                    "ceip_enabled": false
                }
            }
        }

      Description: ""
      Endpoint: ""
      Errors: []
      ID: vcsa-deploy-EXAMPLE.json.tmpl
      Meta: {}
      ReadOnly: false
      Validated: false
  workflows:
    govc-command:
      Available: false
      Bundle: ""
      Description: Run VMware govc command Context workflow
      Documentation: |
        Requires that operator has created a Contexts for ``runner`` and ``govc``
        that can run DRP Agent and ``govc``.  The ``runner`` context is used for
        starting the workflow on a context controller (sometimes referred to as a
        "fake machine"), and the ``govc`` context is responsible for executing the
        ``govc`` command and tooling.

        Leaves the machines in a Govc Context not on the machine
      Endpoint: ""
      Errors: null
      Meta:
        color: purple
        icon: terminal
        title: RackN Content
      Name: govc-command
      ReadOnly: false
      Stages:
      - govc-command
      Validated: false
    govc-create-vcenter:
      Available: false
      Bundle: ""
      Description: Run VMware govc command Context workflow
      Documentation: |
        This workflow first stages the VCSA OVA inside the container context,
        creates a vCenter instance via the ``govc`` command, and then waits
        for the API services to become available in vCenter.

        This process can take upwards of 60 minutes to complete.

        The deployment is controlled by the following Param settings.

        **OVA param**

          * ``govc-ova-location``

        **vSphere ESXi deployment target**

          * ``govc/url``

        or

          * ``govc/username``
          * ``govc/password``
          * ``govc/node``
          * ``govc/port`` *(optional)*

        The VCSA OVA file must be staged and made available, and referenced in
        the ``govc/ova-location`` Param.  See the full documentation for additional
        configuration Params that are available.
      Endpoint: ""
      Errors: null
      Meta:
        color: purple
        icon: terminal
        title: RackN Content
      Name: govc-create-vcenter
      ReadOnly: false
      Stages:
      - govc-datastore-create
      - govc-ova-stage
      - govc-vcenter-create
      - govc-wait-for-vcenter
      Validated: false
    govc-datastore-create:
      Available: false
      Bundle: ""
      Description: Run VMware govc datastore create stage
      Documentation: |
        This workflow creates a datastore on a remote vSphere API node.
        The datastore creation is controlled primarily by two Params:

           * ``govc/datastore-create-name`` - sets the name of the DataStore
           * ``govc/datastore-create-disk`` - defines what disk to make the DataStore on

        Either a *rule* or a specific Device can be specified by the ``govc/datastore-create-disk``
        Param.  Supported *rules* and disk device definition settings examples:

          * ``first_available``
          * ``disk=t10.ATA_____Micron_M500DC_MTFDDAK120MBB_____________________14260DAD9402``

        The default is to use the *rule* ``first_available``.

        The ``first_available`` rule attempts to filter out used disk devices, then
        chooses the first of any remaining disks that are unused.

        .. note:: IF using the *govc* command, you can find the disk information with the command
                  ``govc host.esxcli storage core path list`` (after setting up the appropriate
                  ``GOVC_*`` environment variables, of course.).
      Endpoint: ""
      Errors: null
      Meta:
        color: purple
        icon: terminal
        title: RackN Content
      Name: govc-datastore-create
      ReadOnly: false
      Stages:
      - govc-datastore-create
      Validated: false
    vcsa-deploy-command:
      Available: false
      Bundle: ""
      Description: Run VMware vcsa-deploy command Context workflow
      Documentation: |
        Requires that operator has created a Contexts for "runner" and "vcsa-deploy"
        that can run DRP Angent and vcsa-deploy.

        Leaves the machines in a Runner Context not on the machine.
      Endpoint: ""
      Errors: null
      Meta:
        color: orange
        icon: terminal
        title: RackN Content
      Name: vcsa-deploy-command
      ReadOnly: false
      Stages:
      - vcsa-deploy-command
      Validated: false
